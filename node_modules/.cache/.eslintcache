[{"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/index.js":"1","/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/reportWebVitals.js":"2","/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/App.js":"3","/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/tictactoe/tictac.js":"4","/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/tictactoe/Tictac.js":"5"},{"size":535,"mtime":1655987615768,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1655987615769,"results":"8","hashOfConfig":"7"},{"size":178,"mtime":1656049099334,"results":"9","hashOfConfig":"7"},{"size":924,"mtime":1656049064855,"results":"10","hashOfConfig":"7"},{"size":2763,"mtime":1656062476449,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y6dtxe",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/index.js",[],[],"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/reportWebVitals.js",[],[],"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/App.js",[],[],"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/tictactoe/tictac.js",["28","29"],[],"/Users/avishein/Desktop/Programs/8vdx/tictactoe/src/tictactoe/Tictac.js",["30","31"],[],"import React, {useState} from 'react';\nimport './tictac.css';\n\n\nconst Tictac = () => {\n\n    const [turn, setTurn] = useState('X');\n    const [winner, setWinner] = useState('');\n    const [cells, setCells] = useState(Array(9).fill(''));\n\n\n    const reset = () =>{\n        setCells(Array(9).fill(''));\n        setWinner('');\n    }\n\n\n    const checkWin = (squares) => {\n        let winG = false;\n        let draw = false;\n        let combos = {\n            across: [\n                [0,1,2],\n                [3,4,5],\n                [6,7,8]\n            ],\n            down: [\n                [0,3,6],\n                [1,4,7],\n                [2,5,8]\n            ],\n            diag: [\n                [0,4,8],\n                [2,4,6]\n            ]\n        };\n        for(let combo in combos){\n            combos[combo].forEach ((pattern) => {\n                if(!(squares[pattern[0]] === '') &&\n                    squares[pattern[0]] === squares[pattern[1]] &&\n                    squares[pattern[1]] === squares[pattern[2]]) {\n                    setWinner(squares[pattern[0]] + \" is the winner!\")\n                    winG = true;\n                } \n            });\n        }\n        if(!winG){\n            for (let space in squares){\n                if((squares[space] === '')){\n                    return;\n                }\n            }\n            setWinner(\"It is a Draw!\")\n\n        }\n    }\n\n\n    const handleClick = (num) => {\n        let squares = [...cells];\n        if (winner){\n            return;\n        } else if(cells[num] !== ''){\n            return;\n        }\n        if (turn === 'X'){\n            squares[num] = 'X';\n            setTurn('O');\n        } else {\n            squares[num] = 'O';\n            setTurn('X');\n        }\n        checkWin(squares);\n        setCells(squares);\n    }\n\n    const Cell = ({num}) =>{\n        return <td onClick={() => handleClick(num)}> {cells[num]} </td>\n    }\n\n    return (\n    <div className='container'>\n        <h1> Play Tic Tac Toe </h1>\n        <table>\n        Turn: {turn}\n            <tbody>\n                <tr>\n                    <Cell num= {0}/>\n                    <Cell num= {1}/>\n                    <Cell num= {2}/>\n                </tr>\n                <tr>\n                    <Cell num= {3}/>\n                    <Cell num= {4}/>\n                    <Cell num= {5}/>\n                </tr>\n                <tr>\n                    <Cell num= {6}/>\n                    <Cell num= {7}/>\n                    <Cell num= {8}/>\n                </tr>\n            </tbody>\n        </table>\n        {winner && (\n            <>\n            <h2> {winner} </h2>\n            <button onClick = {() => reset()}> Play Again </button>\n            </>\n        )}\n       \n\n    </div>\n  )\n}\n\nexport default Tictac",{"ruleId":"32","severity":1,"message":"33","line":6,"column":12,"nodeType":"34","messageId":"35","endLine":6,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":6,"column":18,"nodeType":"34","messageId":"35","endLine":6,"endColumn":25},{"ruleId":"32","severity":1,"message":"37","line":20,"column":13,"nodeType":"34","messageId":"35","endLine":20,"endColumn":17},{"ruleId":"38","severity":1,"message":"39","line":38,"column":36,"nodeType":"40","messageId":"41","endLine":45,"endColumn":14},"no-unused-vars","'turn' is assigned a value but never used.","Identifier","unusedVar","'setTurn' is assigned a value but never used.","'draw' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'winG'.","ArrowFunctionExpression","unsafeRefs"]